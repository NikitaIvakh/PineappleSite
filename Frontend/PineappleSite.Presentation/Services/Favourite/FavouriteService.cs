//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using System.CodeDom.Compiler;
using System.Globalization;
using System.Net.Http.Headers;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace PineappleSite.Presentation.Services.Favourite;

using System = System;

[GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial interface IFavouriteClient
{
    /// <returns>Success</returns>
    /// <exception cref="FavouriteExceptions">A server side error occurred.</exception>
    Task<FavouriteDtoResult> GetFavouriteProductsAsync(string userId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="FavouriteExceptions">A server side error occurred.</exception>
    Task<FavouriteDtoResult> GetFavouriteProductsAsync(string userId, CancellationToken cancellationToken);

    /// <returns>Success</returns>
    /// <exception cref="FavouriteExceptions">A server side error occurred.</exception>
    Task<FavouriteHeaderDtoResult> FavouriteUpsertAsync(FavouriteDto body);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="FavouriteExceptions">A server side error occurred.</exception>
    Task<FavouriteHeaderDtoResult> FavouriteUpsertAsync(FavouriteDto body, CancellationToken cancellationToken);

    /// <returns>Success</returns>
    /// <exception cref="FavouriteExceptions">A server side error occurred.</exception>
    Task<FavouriteHeaderDtoResult> DeleteFavouriteProductAsync(int productId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="FavouriteExceptions">A server side error occurred.</exception>
    Task<FavouriteHeaderDtoResult> DeleteFavouriteProductAsync(int productId, CancellationToken cancellationToken);

    /// <returns>Success</returns>
    /// <exception cref="FavouriteExceptions">A server side error occurred.</exception>
    Task<FavouriteHeaderDtoResult> DeleteFavouriteProductsAsync(DeleteFavouriteProductsDto body);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="FavouriteExceptions">A server side error occurred.</exception>
    Task<FavouriteHeaderDtoResult> DeleteFavouriteProductsAsync(DeleteFavouriteProductsDto body, CancellationToken cancellationToken);

}

[GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class FavouriteClient : IFavouriteClient
{
    private static Lazy<JsonSerializerSettings> _settings = new Lazy<JsonSerializerSettings>(CreateSerializerSettings, true);

    public FavouriteClient(HttpClient httpClient)
    {
        HttpClient = httpClient;
    }

    private static JsonSerializerSettings CreateSerializerSettings()
    {
        var settings = new JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
    }

    protected JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    static partial void UpdateJsonSerializerSettings(JsonSerializerSettings settings);

    partial void PrepareRequest(HttpClient client, HttpRequestMessage request, string url);
    partial void PrepareRequest(HttpClient client, HttpRequestMessage request, StringBuilder urlBuilder);
    partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

    /// <returns>Success</returns>
    /// <exception cref="FavouriteExceptions">A server side error occurred.</exception>
    public Task<FavouriteDtoResult> GetFavouriteProductsAsync(string userId)
    {
        return GetFavouriteProductsAsync(userId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="FavouriteExceptions">A server side error occurred.</exception>
    public async Task<FavouriteDtoResult> GetFavouriteProductsAsync(string userId, CancellationToken cancellationToken)
    {
        if (userId == null)
            throw new ArgumentNullException("userId");

        var client_ = HttpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                var urlBuilder_ = new StringBuilder();
                
                urlBuilder_.Append("api");
                urlBuilder_.Append('/');
                urlBuilder_.Append("favourites");
                urlBuilder_.Append('/');
                urlBuilder_.Append("GetFavouriteProducts");
                urlBuilder_.Append('/');
                urlBuilder_.Append(Uri.EscapeDataString(ConvertToString(userId, CultureInfo.InvariantCulture)));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<FavouriteDtoResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new FavouriteExceptions("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new FavouriteExceptions("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new FavouriteExceptions<string>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new FavouriteExceptions("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <returns>Success</returns>
    /// <exception cref="FavouriteExceptions">A server side error occurred.</exception>
    public Task<FavouriteHeaderDtoResult> FavouriteUpsertAsync(FavouriteDto body)
    {
        return FavouriteUpsertAsync(body, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="FavouriteExceptions">A server side error occurred.</exception>
    public async Task<FavouriteHeaderDtoResult> FavouriteUpsertAsync(FavouriteDto body, CancellationToken cancellationToken)
    {
        if (body == null)
            throw new ArgumentNullException("body");

        var client_ = HttpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                var content_ = new StringContent(json_);
                content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                var urlBuilder_ = new StringBuilder();
                
                urlBuilder_.Append("api");
                urlBuilder_.Append('/');
                urlBuilder_.Append("favourites");
                urlBuilder_.Append('/');
                urlBuilder_.Append("FavouriteUpsertAsync");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<FavouriteHeaderDtoResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new FavouriteExceptions("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new FavouriteExceptions("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new FavouriteExceptions<string>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new FavouriteExceptions("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <returns>Success</returns>
    /// <exception cref="FavouriteExceptions">A server side error occurred.</exception>
    public Task<FavouriteHeaderDtoResult> DeleteFavouriteProductAsync(int productId)
    {
        return DeleteFavouriteProductAsync(productId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="FavouriteExceptions">A server side error occurred.</exception>
    public async Task<FavouriteHeaderDtoResult> DeleteFavouriteProductAsync(int productId, CancellationToken cancellationToken)
    {
        if (productId == null)
            throw new ArgumentNullException("productId");

        var client_ = HttpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("DELETE");
                request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                var urlBuilder_ = new StringBuilder();
                
                urlBuilder_.Append("api");
                urlBuilder_.Append('/');
                urlBuilder_.Append("favourites");
                urlBuilder_.Append('/');
                urlBuilder_.Append("DeleteFavouriteProduct");
                urlBuilder_.Append('/');
                urlBuilder_.Append(Uri.EscapeDataString(ConvertToString(productId, CultureInfo.InvariantCulture)));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<FavouriteHeaderDtoResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new FavouriteExceptions("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new FavouriteExceptions("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new FavouriteExceptions<string>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new FavouriteExceptions("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <returns>Success</returns>
    /// <exception cref="FavouriteExceptions">A server side error occurred.</exception>
    public Task<FavouriteHeaderDtoResult> DeleteFavouriteProductsAsync(DeleteFavouriteProductsDto body)
    {
        return DeleteFavouriteProductsAsync(body, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="FavouriteExceptions">A server side error occurred.</exception>
    public async Task<FavouriteHeaderDtoResult> DeleteFavouriteProductsAsync(DeleteFavouriteProductsDto body, CancellationToken cancellationToken)
    {
        if (body == null)
            throw new ArgumentNullException("body");

        var client_ = HttpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                var content_ = new StringContent(json_);
                content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("DELETE");
                request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                var urlBuilder_ = new StringBuilder();
                
                urlBuilder_.Append("api");
                urlBuilder_.Append('/');
                urlBuilder_.Append("favourites");
                urlBuilder_.Append('/');
                urlBuilder_.Append("DeleteFavouriteProducts");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<FavouriteHeaderDtoResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new FavouriteExceptions("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new FavouriteExceptions("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new FavouriteExceptions<string>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new FavouriteExceptions("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    protected struct ObjectResponseResult<T>
    {
        public ObjectResponseResult(T responseObject, string responseText)
        {
            this.Object = responseObject;
            this.Text = responseText;
        }

        public T Object { get; }

        public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
    {
        if (response == null || response.Content == null)
        {
            return new ObjectResponseResult<T>(default(T), string.Empty);
        }

        if (ReadResponseAsString)
        {
            var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            try
            {
                var typedBody = JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                return new ObjectResponseResult<T>(typedBody, responseText);
            }
            catch (JsonException exception)
            {
                var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                throw new FavouriteExceptions(message, (int)response.StatusCode, responseText, headers, exception);
            }
        }
        else
        {
            try
            {
                using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                using (var streamReader = new StreamReader(responseStream))
                using (var jsonTextReader = new JsonTextReader(streamReader))
                {
                    var serializer = JsonSerializer.Create(JsonSerializerSettings);
                    var typedBody = serializer.Deserialize<T>(jsonTextReader);
                    return new ObjectResponseResult<T>(typedBody, string.Empty);
                }
            }
            catch (JsonException exception)
            {
                var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                throw new FavouriteExceptions(message, (int)response.StatusCode, string.Empty, headers, exception);
            }
        }
    }

    private string ConvertToString(object value, CultureInfo cultureInfo)
    {
        if (value == null)
        {
            return "";
        }

        if (value is Enum)
        {
            var name = Enum.GetName(value.GetType(), value);
            if (name != null)
            {
                var field = IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                if (field != null)
                {
                    var attribute = CustomAttributeExtensions.GetCustomAttribute(field, typeof(EnumMemberAttribute)) 
                        as EnumMemberAttribute;
                    if (attribute != null)
                    {
                        return attribute.Value != null ? attribute.Value : name;
                    }
                }

                var converted = Convert.ToString(Convert.ChangeType(value, Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                return converted == null ? string.Empty : converted;
            }
        }
        else if (value is bool) 
        {
            return Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
        }
        else if (value is byte[])
        {
            return Convert.ToBase64String((byte[]) value);
        }
        else if (value.GetType().IsArray)
        {
            var array = Enumerable.OfType<object>((Array) value);
            return string.Join(",", Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
        }

        var result = Convert.ToString(value, cultureInfo);
        return result == null ? "" : result;
    }
}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class DeleteFavouriteProductsDto
{
    [JsonProperty("productIds", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
    public ICollection<int> ProductIds { get; set; }

}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class FavouriteDetailsDto
{
    [JsonProperty("favouriteDetailsId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
    public int FavouriteDetailsId { get; set; }

    [JsonProperty("favouriteHeader", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
    public FavouriteHeaderDto FavouriteHeader { get; set; }

    [JsonProperty("favouriteHeaderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
    public int FavouriteHeaderId { get; set; }

    [JsonProperty("product", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
    public ProductDto Product { get; set; }

    [JsonProperty("productId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
    public int ProductId { get; set; }

}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class FavouriteDto
{
    [JsonProperty("favouriteHeader", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
    public FavouriteHeaderDto FavouriteHeader { get; set; }

    [JsonProperty("favouriteDetails", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
    public ICollection<FavouriteDetailsDto> FavouriteDetails { get; set; }

}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class FavouriteDtoResult
{
    [JsonProperty("isSuccess", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
    public bool IsSuccess { get; set; }

    [JsonProperty("successMessage", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
    public string SuccessMessage { get; set; }

    [JsonProperty("errorMessage", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
    public string ErrorMessage { get; set; }

    [JsonProperty("statusCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
    public int? StatusCode { get; set; }

    [JsonProperty("validationErrors", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
    public ICollection<string> ValidationErrors { get; set; }

    [JsonProperty("data", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
    public FavouriteDto Data { get; set; }

}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class FavouriteHeaderDto
{
    [JsonProperty("favouriteHeaderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
    public int FavouriteHeaderId { get; set; }

    [JsonProperty("userId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
    public string UserId { get; set; }

}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class FavouriteHeaderDtoResult
{
    [JsonProperty("isSuccess", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
    public bool IsSuccess { get; set; }

    [JsonProperty("successMessage", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
    public string SuccessMessage { get; set; }

    [JsonProperty("errorMessage", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
    public string ErrorMessage { get; set; }

    [JsonProperty("statusCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
    public int? StatusCode { get; set; }

    [JsonProperty("validationErrors", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
    public ICollection<string> ValidationErrors { get; set; }

    [JsonProperty("data", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
    public FavouriteHeaderDto Data { get; set; }

}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public enum ProductCategory
{

    _1 = 1,

    _2 = 2,

    _3 = 3,

}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class ProductDto
{
    [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
    public int Id { get; set; }

    [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
    public string Name { get; set; }

    [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
    public string Description { get; set; }

    [JsonProperty("productCategory", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
    public ProductCategory ProductCategory { get; set; }

    [JsonProperty("price", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
    public double Price { get; set; }

    [JsonProperty("imageUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
    public string ImageUrl { get; set; }

    [JsonProperty("imageLocalPath", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
    public string ImageLocalPath { get; set; }

}



[GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class FavouriteExceptions : Exception
{
    public int StatusCode { get; private set; }

    public string Response { get; private set; }

    public IReadOnlyDictionary<string, IEnumerable<string>> Headers { get; private set; }

    public FavouriteExceptions(string message, int statusCode, string response, IReadOnlyDictionary<string, IEnumerable<string>> headers, Exception innerException)
        : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
    {
        StatusCode = statusCode;
        Response = response;
        Headers = headers;
    }

    public override string ToString()
    {
        return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
    }
}

[GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class FavouriteExceptions<TResult> : FavouriteExceptions
{
    public TResult Result { get; private set; }

    public FavouriteExceptions(string message, int statusCode, string response, IReadOnlyDictionary<string, IEnumerable<string>> headers, TResult result, Exception innerException)
        : base(message, statusCode, response, headers, innerException)
    {
        Result = result;
    }
}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604